// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PhraseSDK
import Foundation
@_exported import PhraseSDK
import Swift
import UIKit/*.UIDevice*/
public protocol PhraseError : Swift.Error {
}
public enum PhraseSetupError : PhraseSDK.PhraseError {
  case notInitialized
  case missingDistributionID
  case missingEnvironmentSecret
  case appVersionNotSemantic(reason: Swift.String)
}
public enum PhraseInternalError : PhraseSDK.PhraseError {
  case bundleNotAvailable
  case apiUrlError
  case unknownError(underlyingError: Swift.Error)
}
public enum PhraseNetworkError : PhraseSDK.PhraseError {
  case connectionError(underlyingError: Swift.Error)
  case responseNotHTTP
  case responseUrlMissing
  case responseStatusInvalid(code: Swift.Int, message: Swift.String)
  case responseDataInvalid
}
public struct PhraseUpdateError : PhraseSDK.PhraseError {
  public let underlyingErrors: [PhraseSDK.PhraseError]
  public var last: PhraseSDK.PhraseError {
    get
  }
}
@available(*, unavailable, renamed: "Phrase")
public typealias PhraseApp = PhraseSDK.Phrase
@available(*, unavailable, renamed: "PhraseError")
public typealias PhraseAppError = PhraseSDK.PhraseError
@available(*, unavailable)
public typealias PhraseAppBundle = Foundation.Bundle
@available(*, unavailable)
public typealias PhraseAppTranslationResult = Swift.Result
public class Phrase {
  public static let shared: PhraseSDK.Phrase
  public var debugMode: Swift.Bool
  public func setup(distributionID: Swift.String, environmentSecret: Swift.String, timeout: Swift.Double = 10.0)
  @objc deinit
}
extension Phrase {
  public func updateTranslations(completionHandler: ((Swift.Result<Swift.Bool, PhraseSDK.PhraseUpdateError>) -> Swift.Void)? = nil) throws
}
extension Phrase {
  public func localizedString(forKey key: Swift.String, value: Swift.String?, table tableName: Swift.String?) -> Swift.String
}
